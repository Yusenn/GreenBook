@page "/post/make"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3 class="card-title">Create New Posts</h3>
<hr />
<br />

<FormComponent ButtonText="Create" OnValidSubmit="CreatePost" post="post" />



@code {
    Post post = new Post();
    Location location = new Location();
    private List<AppUser> AppUsers;
    private List<Location> Locations;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string _currentUserId;
    private string _currentUserName;
    protected async override Task OnInitializedAsync()
    {
        Locations = await _client.GetFromJsonAsync<List<Location>>($"{Endpoints.PostsEndpoint}");

        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");
        var authState = await
        AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            _claims = user.Claims;
            //_currentUserName = user.Identity.Name;
            if (_claims.Count() > 0)
            {
                foreach (var claim in _claims)
                {
                    if (claim.Type == "sub")
                    {
                        _currentUserId = claim.Value;
                        continue;
                    }
                    if (claim.Type == "name")
                    {
                        _currentUserName = claim.Value;
                        continue;
                    }
                }
            }
        }

    }
    private async Task CreatePost()
    {

        post.UserId = _currentUserId;
        await _client.PostAsJsonAsync(Endpoints.PostsEndpoint, post);



        _navManager.NavigateTo("/");
    }

}
