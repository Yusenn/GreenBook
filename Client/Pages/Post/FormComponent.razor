@inject AuthenticationStateProvider GetAuthenticationStateAsync
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient _client

<EditForm Model="@post" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Title: </label>
        <div>
            <InputText @bind-Value="@post.Title" class="form-control" />
            <ValidationMessage For="@(()=>post.Title)" />

        </div>
    </div>

    <div class="form-group">
        <label>Pic Url: </label>
        <div>
            <InputText @bind-Value="@post.PicUrl" class="form-control" />
            <ValidationMessage For="@(()=>post.PicUrl)" />

        </div>
    </div>
    <div class="form-group">
        <label>Location: </label>
        <div>
            <InputText @bind-Value="@post.Location" class="form-control" />
            <ValidationMessage For="@(()=>post.Location)" />

        </div>
    </div>
    <div class="form-group">
        <label>Text: </label>
        <div>
            <InputTextArea @bind-Value="@post.Text" class="form-control" />
            <ValidationMessage For="@(()=>post.Text)" />

        </div>
    </div>
    <button type="submit" class="btn btn-success btn-block">
        @ButtonText
    </button>
</EditForm>
@code {
    [Parameter] public Post post { get; set; }
    [Parameter] public string ButtonText { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    private List<AppUser> AppUsers;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string _currentUserId;
    private string _currentUserName;
    protected async override Task OnInitializedAsync()
    {

        AppUsers = await
        _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");
        var authState = await
        AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            _claims = user.Claims;
            //_currentUserName = user.Identity.Name;
            if (_claims.Count() > 0)
            {
                foreach (var claim in _claims)
                {
                    if (claim.Type == "sub")
                    {
                        _currentUserId = claim.Value;
                        continue;
                    }
                    if (claim.Type == "name")
                    {
                        _currentUserName = claim.Value;
                        continue;
                    }
                }
            }
        }

    }
}
