@page "/post/view/{Id:int}"
@inject HttpClient _client
@inject AuthenticationStateProvider _GetAuthenticationStateAsync
@inject NavigationManager _navManager
    <head>
        <link href="css/SinglePost.css" rel="stylesheet" />
    </head>


    <div class="header"></div>
    <div class="content">
        <div class="wrap">
            <div class="single-page">
                <div class="single-page-content">
                    <img src="/Image/img4.jpg" />
                    <h3>@Post.Title</h3>
                    <p>@Post.Text</p>
                </div>
            </div>
            @if (Comments == null)
            {
                <h2>Comments</h2>
                <p>There is no comment yet</p>
            }
            else
            {
                foreach (var comment in Post.Comments)
                {
                    <div class="comment-section">
                        <h2>Comments</h2>
                        <p>User Name</p>
                        <p>@comment.Text</p>
                    </div>

                }

            }

            <div class="comment-box">
                <h2>Leave a Comment</h2>
                <h2>Leave a Comment</h2>
                <EditForm Model="comment" OnValidSubmit="CreateComment">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <InputTextArea @bind-Value="@comment.Text" class="form-control" />
                        <ValidationMessage For="@(()=>comment.Text)" />
                    </div>
                    <button type="submit" class="btn btn-success btn-block">
                        Create Post
                    </button>
                </EditForm>


            </div>
        </div>
    </div>

    @code {
        [Parameter] public int Id { get; set; }
        Post Post = new Post();
        private List<Comment> Comments;
        Comment comment = new Comment();
        protected async override Task OnInitializedAsync()
        {
            Post = await _client.GetFromJsonAsync<Post>($"{Endpoints.PostsEndpoint}/{Id}");
            Comments = await _client.GetFromJsonAsync<List<Comment>>($"{Endpoints.CommentsEndpoint}");


            //var authstate = await _GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            //var user = authstate.User;
            //var name = user.Identity.Name;
        }

        protected async Task CreateComment()
        {
            await _client.PostAsJsonAsync(Endpoints.CommentsEndpoint, comment);

            _navManager.NavigateTo("/post/view/{Id:int");

        }
    }
